"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toMatchCdkSnapshot = void 0;
const assertions_1 = require("aws-cdk-lib/assertions");
const jest_snapshot_1 = require("jest-snapshot");
const jsYaml = __importStar(require("js-yaml"));
const currentVersionRegex = /^(.+CurrentVersion[0-9A-F]{8})[0-9a-f]{32}$/;
const toMatchCdkSnapshot = function (received, options = {}) {
    const matcher = jest_snapshot_1.toMatchSnapshot.bind(this);
    const { propertyMatchers, ...convertOptions } = options;
    const stack = convertStack(received, convertOptions);
    return propertyMatchers ? matcher(stack, propertyMatchers) : matcher(stack);
};
exports.toMatchCdkSnapshot = toMatchCdkSnapshot;
const maskCurrentVersionRefs = (tree) => {
    if (tree == null) {
        return;
    }
    if (Array.isArray(tree)) {
        for (let i = 0; i < tree.length; i++) {
            const value = tree[i];
            if (typeof value === "string") {
                const match = currentVersionRegex.exec(value);
                if (match) {
                    tree[i] = `${match[1]}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`;
                }
            }
            else if (typeof value === "object") {
                maskCurrentVersionRefs(value);
            }
        }
    }
    else if (typeof tree === "object") {
        for (const [key, value] of Object.entries(tree)) {
            const keyMatch = currentVersionRegex.exec(key);
            if (keyMatch) {
                const newKey = `${keyMatch[1]}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`;
                tree[newKey] = value;
                delete tree[key];
            }
            if (typeof value === "string") {
                const valueMatch = currentVersionRegex.exec(value);
                if (valueMatch) {
                    tree[key] = `${valueMatch[1]}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`;
                }
            }
            else if (typeof value === "object") {
                maskCurrentVersionRefs(value);
            }
        }
    }
};
const convertStack = (stack, options = {}) => {
    const { yaml, ignoreAssets = false, ignoreBootstrapVersion = true, ignoreCurrentVersion = false, ignoreMetadata = false, ignoreTags = false, subsetResourceTypes, subsetResourceKeys, ...synthOptions } = options;
    if (Object.keys(synthOptions).length > 0) {
        console.warn("Synth options are no longer supported. Please remove them.");
    }
    const template = assertions_1.Template.fromStack(stack, {}).toJSON();
    if (ignoreBootstrapVersion) {
        if (template.Parameters) {
            delete template.Parameters.BootstrapVersion;
            if (Object.keys(template.Parameters).length === 0) {
                delete template.Parameters;
            }
        }
        if (template.Rules) {
            delete template.Rules.CheckBootstrapVersion;
            if (Object.keys(template.Rules).length === 0) {
                delete template.Rules;
            }
        }
    }
    if (ignoreAssets && template.Resources) {
        const anyObject = yaml ? "Any<Object>" : expect.any(Object);
        if (template.Parameters) {
            template.Parameters = anyObject;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.values(template.Resources).forEach((resource) => {
            var _a, _b, _c;
            if ((_a = resource === null || resource === void 0 ? void 0 : resource.Properties) === null || _a === void 0 ? void 0 : _a.Code) {
                resource.Properties.Code = anyObject;
            }
            if ((_b = resource === null || resource === void 0 ? void 0 : resource.Properties) === null || _b === void 0 ? void 0 : _b.ContainerDefinitions) {
                (_c = resource === null || resource === void 0 ? void 0 : resource.Properties) === null || _c === void 0 ? void 0 : _c.ContainerDefinitions.forEach(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (definition) => {
                    definition.Image = anyObject;
                });
            }
        });
    }
    if (ignoreCurrentVersion && template.Resources) {
        maskCurrentVersionRefs(template);
    }
    if (subsetResourceTypes && template.Resources) {
        for (const [key, resource] of Object.entries(template.Resources)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if (!subsetResourceTypes.includes(resource.Type)) {
                delete template.Resources[key];
            }
        }
    }
    if (subsetResourceKeys && template.Resources) {
        for (const [key] of Object.entries(template.Resources)) {
            if (!subsetResourceKeys.includes(key)) {
                delete template.Resources[key];
            }
        }
    }
    if (ignoreMetadata && template.Metadata) {
        delete template.Metadata;
    }
    if (ignoreMetadata && template.Resources) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.values(template.Resources).forEach((resource) => {
            if (resource === null || resource === void 0 ? void 0 : resource.Metadata) {
                delete resource.Metadata;
            }
        });
    }
    if (ignoreTags && template.Resources) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Object.values(template.Resources).forEach((resource) => {
            var _a;
            if ((_a = resource === null || resource === void 0 ? void 0 : resource.Properties) === null || _a === void 0 ? void 0 : _a.Tags) {
                delete resource.Properties.Tags;
            }
        });
    }
    return yaml ? jsYaml.safeDump(template) : template;
};
if (expect !== undefined) {
    expect.extend({ toMatchCdkSnapshot: exports.toMatchCdkSnapshot });
}
else {
    console.error("Unable to find Jest's global expect." +
        "\nPlease check you have added jest-cdk-snapshot correctly." +
        "\nSee https://github.com/hupe1980/jest-cdk-snapshot for help.");
}
//# sourceMappingURL=data:application/json;base64,